{"version":3,"sources":["components/Nav.js","components/About.js","components/Shop.js","components/CustomerDetails.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","about","Shop","useEffect","fetchUsers","useState","users","setUsers","axios","get","then","response","data","map","user","key","id","name","CustomerDetails","match","fetchUser","address","setUser","params","console","log","street","suite","zipcode","home","App","path","exact","component","About","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"kQA6BeA,MAxBf,WACI,IAAMC,EAAU,CACZC,MAAO,SAEX,OACI,6BACI,6BACI,oCACA,wBAAIC,UAAU,aACV,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,UAC1B,sCAEA,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,SAC1B,yCCPLC,MARf,WACI,OACI,6BACI,4C,yBCCCC,EAAO,WACpBC,qBAAU,WACNC,MAEF,IAJwB,MAMIC,mBAAS,IANb,mBAMfC,EANe,KAMRC,EANQ,KAgBhBH,EAAa,WACfI,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACF,IAAML,EAAQK,EAASC,KAEvBL,EAASD,OAKjB,OACI,6BACI,8CACA,6BACKA,EAAMO,KAAI,SAAAC,GAAI,OACX,wBAAIC,IAAKD,EAAKE,IACV,kBAAC,IAAD,CAAMhB,GAAE,gBAAWc,EAAKE,KAAOF,EAAKG,a,OCP7CC,MA7Bf,YAAqC,IAAVC,EAAS,EAATA,MACvBhB,qBAAU,WACNiB,MAEF,IAJ8B,MAMRf,mBAAS,CAC7BgB,QAAS,KAPmB,mBAMzBP,EANyB,KAMnBQ,EANmB,KAY1BF,EAAY,WACdZ,IAAMC,IAAN,qDAAwDU,EAAMI,OAAOP,KACpEN,MAAK,SAAAC,GACF,IAAMG,EAAOH,EAASC,KACtBU,EAAQR,GACRU,QAAQC,IAAIX,OAIpB,OACI,6BACI,4BAAKA,EAAKG,MAClB,uCAAY,6BAAZ,WAA0BH,EAAKO,QAAQK,OAAvC,IAA+C,6BAA/C,SAA2DZ,EAAKO,QAAQM,MAAM,6BAA9E,aAA8Fb,EAAKO,QAAQO,QAA3G,OCFJ,IAAMC,EAAO,kBACX,6BACE,2CAMWC,EAxBf,WACE,OACE,yBAAKhC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiC,KAAK,IAAIC,OAAK,EAACC,UAAWJ,IACjC,kBAAC,IAAD,CAAOE,KAAK,SAASE,UAAWC,IAChC,kBAAC,IAAD,CAAOH,KAAK,QAAQC,OAAK,EAACC,UAAW/B,IACrC,kBAAC,IAAD,CAAO6B,KAAK,YAAYE,UAAWf,QCNzBiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASnB,MACvB,2DCZNoB,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.ae71420e.chunk.js","sourcesContent":["import React from 'react'\r\nimport '../App.css';\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nfunction Nav() {\r\n    const navStyle ={\r\n        color: 'white'\r\n    }\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <h3>logo</h3>\r\n                <ul className=\"nav-links\">\r\n                    <Link style={navStyle} to=\"/about\">\r\n                    <li>About</li>\r\n                    </Link>\r\n                    <Link style={navStyle} to=\"/shop\">\r\n                    <li>Shop</li>\r\n                    </Link>\r\n                    \r\n                    \r\n                </ul>\r\n\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import React from 'react'\r\nimport '../App.css';\r\n\r\nfunction about() {\r\n    return (\r\n        <div>\r\n            <h1>About page</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default about\r\n","import React,{ useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport axios from 'axios'\r\nimport {Link} from 'react-router-dom'\r\n\r\n\r\n\r\nexport const Shop = () => {\r\nuseEffect(() => {\r\n    fetchUsers()\r\n    // fetchItems()\r\n},[])\r\n\r\n    const [users, setUsers] = useState([])\r\n\r\n    //server doesnt work\r\n\r\n    // const fetchItems = async () => {\r\n    //     const data = await fetch('https://fortnite-public-api.theapinetwork.com/prod09/store/get')\r\n    //     const items = await data.json()\r\n    //     console.log(items)\r\n    // }\r\n\r\n    const fetchUsers = () => {\r\n        axios.get('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => {\r\n            const users = response.data\r\n            // console.log(users)\r\n            setUsers(users)\r\n        })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1>Customers name</h1>\r\n            <div>\r\n                {users.map(user => (\r\n                    <h3 key={user.id}>\r\n                        <Link to={`/shop/${user.id}`}>{user.name}</Link>\r\n                        \r\n                        </h3>\r\n                ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React,{ useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\nfunction CustomerDetails({ match }) {\r\n    useEffect(() => {\r\n        fetchUser()\r\n        // console.log(match)\r\n    },[])\r\n\r\n    const [user, setUser] = useState({\r\n        address: {}\r\n    })\r\n\r\n\r\n\r\n    const fetchUser = () => {\r\n        axios.get(`https://jsonplaceholder.typicode.com/users/${match.params.id}`)\r\n        .then(response => {\r\n            const user = response.data\r\n            setUser(user)\r\n            console.log(user)\r\n        })\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>{user.name}</h1>\r\n    <h1>Address:<br/> Street-{user.address.street} <br/> Suit-{user.address.suite}<br/> Zip code-{user.address.zipcode} </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CustomerDetails\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './components/Nav'\nimport About from './components/About'\nimport { Shop } from './components/Shop'\n\nimport { BrowserRouter as Router, Switch, Route} from 'react-router-dom'\nimport CustomerDetails from './components/CustomerDetails';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={home} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/shop\" exact component={Shop} />\n          <Route path=\"/shop/:id\" component={CustomerDetails}/>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nconst home = () => (\n  <div>\n    <h1>Home page</h1>\n  </div>\n)\n  \n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}